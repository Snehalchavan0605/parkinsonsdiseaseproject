from skimage import feature
import tkinter as tk
from tkinter import filedialog
from tkinter import *
from PIL import ImageTk, Image
import numpy as np
import cv2
import joblib
from keras.models import load_model

model = joblib.load("C:\\Users\\User\\Downloads\\spralmodel.joblib")

# Initialize GUI
top = tk.Tk()

# Get the screen width and height
screen_width = top.winfo_screenwidth()
screen_height = top.winfo_screenheight()

# Set the window size
window_width = int(screen_width * 0.8)  # 80% of the screen width
window_height = int(screen_height * 0.8)  # 80% of the screen height

# Center the window on the screen
x = int((screen_width - window_width) / 2)
y = int((screen_height - window_height) / 2)

# Set the window geometry
top.geometry(f"{window_width}x{window_height}+{x}+{y}")
top.title("Parkinson's Disease Analysis")
top.configure(background='#FDFEFE')

# Set background image
background_image_path = "C:\\Users\\User\\Pictures\\Screenshots\\Screenshot (339).png"
background_image = Image.open(background_image_path)
background_photo = ImageTk.PhotoImage(background_image)
background_label = tk.Label(top, image=background_photo)
background_label.place(x=0, y=0, relwidth=1, relheight=1)

# Content frames
content_frame = Frame(top, bg='#FDFEFE', padx=20, pady=10, bd=2, relief=SOLID)
content_frame.pack()

sign_image_frame = Frame(content_frame, bg='#FDFEFE', bd=2, relief=SOLID)
sign_image_frame.pack(pady=20)

sign_image = Label(sign_image_frame)
sign_image.pack()

analyze_button_frame = Frame(content_frame, bg='#FDFEFE', bd=2, relief=SOLID)
analyze_button_frame.pack(pady=10)

analyze_button = Button(analyze_button_frame, text="Analyze Spiral", padx=10, pady=5)
analyze_button.configure(background='#27AE60', foreground='#FFFFFF', font=('Arial', 18, 'bold'), relief=RAISED, bd=2)

def classify(file_path):
    image = cv2.imread(file_path)
    output = image.copy()
    output = cv2.resize(output, (128, 128))

    # Pre-process the image
    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    image = cv2.resize(image, (200, 200))
    image = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]

    # Quantify the image and make predictions based on the extracted features
    features = feature.hog(image, orientations=9, pixels_per_cell=(10, 10), cells_per_block=(2, 2), transform_sqrt=True, block_norm="L1")
    preds = model.predict([features])
    out = "Parkinson's Disease Detected" if preds[0] else "No Parkinson's Disease Detected"
    
    result_window = Toplevel(top)
    result_window.title("Result")
    
    # Set the window size
    result_width = int(screen_width * 0.8)  # 80% of the screen width
    result_height = int(screen_height * 0.8)  # 80
    result_label = Label(result_window, text=out, font=('Arial', 24, 'bold'), pady=20)
    result_label.configure(background='#FDFEFE', foreground='#27AE60' if preds[0] else '#E74C3C')
    result_label.pack(fill='both', expand=True)
    

def show_analyze_button(file_path):
    analyze_button.configure(command=lambda: classify(file_path))
    analyze_button.pack(pady=(0, 10))

def upload_image():
    try:
        file_path = filedialog.askopenfilename()
        uploaded = Image.open(file_path)
        uploaded.thumbnail(((top.winfo_width() / 2.25), (top.winfo_height() / 2.25)))
        im = ImageTk.PhotoImage(uploaded)

        sign_image.configure(image=im)
        sign_image.image = im
        show_analyze_button(file_path)
    except:
        pass

upload_frame = Frame(top, bg='#FDFEFE', bd=2, relief=SOLID)
upload_frame.pack(side=BOTTOM, pady=20)

upload = Button(upload_frame, text="Upload Spiral Image", command=upload_image, padx=10, pady=5)
upload.configure(background='#2980B9', foreground='#FFFFFF', font=('Arial', 18,'bold'), relief='raised')
upload.pack(padx=10, pady=10)

top.mainloop()